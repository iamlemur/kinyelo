<?xml version="1.0" encoding="UTF-8"?>

<!-- can still address unit testing and db migrations, include frontend? less compilation? handling javascripts? rsync staging assets with production -->

<project name="kinyelo" default="local">

    <property name="dir.local.tmp"             value="/tmp/build" />
    <property name="dir.local.packages"          value="${dir.local.tmp}/packages"/>
    <property name="dir.local.repos"          value="${dir.local.tmp}/repositories"/>


    <target name="prepare">

        <delete dir="${dir.local.tmp}" includeemptydirs="true" failonerror="false" />
        <mkdir dir="${dir.local.tmp}"/>
        <mkdir dir="${dir.local.packages}"/>
        <mkdir dir="${dir.local.repos}"/>
        <mkdir dir="${dir.local.release}"/>

    </target>


    <target name="production">

        <property name="basedir"            value="/home/kinyelo/kinyelo.com" />
        <property name="server" value="braeval.dreamhost.com"/>
        <property name="username.ftp" value="kinyelo"/>
        <property name="dir.local.release"          value="${dir.local.tmp}/release"/>

        <phingcall target="prepare" />
        <propertyprompt propertyName="username.github" promptText="GitHub username" />
        <propertyprompt propertyName="lib.branch" useExistingValue="false" promptText="Branch to deploy" />
        <phingcall target="kinyelo" />
        <phingcall target="compile" />
        <phingcall target="switch" />
        <phingcall target="package"/>
        <phingcall target="upload"/>

    </target>


    <target name="kinyelo">

        <property name="lib.repo" value="https://${username.github}@github.com/iamlemur/kinyelo" />
        <property name="lib.strip"          value="0"/>
        <property name="lib.paths"          value="" />
        <property name="lib.destination"          value="${dir.local.release}"/>
        <property name="dir.repo.this"          value="${dir.local.repos}/kinyelo"/>
        <propertyprompt propertyName="username.github" useExistingValue="false" promptText="GitHub username" />

        <delete dir="${dir.repo.this}" includeemptydirs="true"/>
        <echo msg="Now cloning the GitHub repository"/>
        <echo msg="git clone --branch ${lib.branch} ${lib.repo} ${dir.repo.this}"/>
        <exec command="git clone --branch ${lib.branch} ${lib.repo} ${dir.repo.this}"></exec>
        <echo msg="git --work-tree=${dir.local.repos.this} --git-dir=${dir.local.repos.this}/.git archive ${lib.branch} ${lib.paths} | (mkdir ${lib.destination} &amp;&amp; tar --strip-components=${lib.strip} -x -C ${lib.destination})"/>
        <exec command="git --work-tree=${dir.local.repos.this} --git-dir=${dir.local.repos.this}/.git archive ${lib.branch} ${lib.paths} | (mkdir ${lib.destination} &amp;&amp; tar --strip-components=${lib.strip} -x -C ${lib.destination})"></exec>

    </target>

    <target name="compile">

        <echo msg="Compiling JS" />
        <!-- the -x option does not work for some reason -->
        <echo msg="java -jar /var/www/resources/plovr/plovr.jar build ${dir.local.release}/resources/plovr/kinyelo-config.js > ${dir.local.release}/public/assets/js/compiled.js" />
        <exec command="java -jar /var/www/resources/plovr/plovr.jar build ${dir.local.release}/resources/plovr/kinyelo-config.js > ${dir.local.release}/public/assets/js/compiled.js" />

        <chmod mode="0777">
            <fileset dir="${dir.local.release}" >
                <include name="app/storage/**" />
                <include name="public/assets/cache/**" />
            </fileset>
        </chmod>

        <exec command="composer install" dir="${dir.local.release}/" />
        <exec command="grunt install" dir="${dir.local.release}/" />
        <exec command="bower install" dir="${dir.local.release}/" />

    </target>



    <target name="package">

        <tar destfile="${dir.local.packages}/kinyelo.tar.gz" prefix="${basedir}/releases/${lib.branch}/" compression="gzip">
            <fileset dir="${dir.local.release}">
                <patternset>
                    <include name="app/**" />
                    <include name="bootstrap/**" />
                    <include name="public/**" />
                    <include name="vendor/**" />
                    <exclude name=".git*" />
                    <exclude name="resources/plovr/plovr.jar" />
                    <exclude name=".git*" />
                    <exclude name="bower_components/**" />
                    <exclude name="/node_modules/**" />
                </patternset>
            </fileset>
        </tar>

    </target>

    <target name="switch" description="Prepares the scripts for updating symlinks">

        <copy todir="${dir.local.release}">
            <filterchain>
                <expandproperties />
                <replaceregexp>
                    <regexp pattern="\r(\n)" replace="\1"/>
                </replaceregexp>
            </filterchain>

            <fileset dir="./scripts">
                <include name="switch.sh" />
            </fileset>
        </copy>

    </target>

    <target name="upload">

        <echo message="Uploading packages"/>

        <exec command="read -s -p &quot;Enter password: &quot; password &amp;&amp; echo &quot;$password&quot; " outputProperty="password"/>
        <scp username="${username.ftp}" password="${password}" host="${server}" todir="${basedir}/releases">
            <fileset dir="${dir.local.packages}">
                <include name="*.tar.gz"/>
            </fileset>
        </scp>
        <echo message="deleting the release directory on target machine"/>
        <echo message="extracting uploaded packages"/>
        <echo message="removing uploaded packages"/>
        <echo message="running commands: tar -Ppzxf ${basedir}/releases/${lib.branch}.tar.gz; rm -vf ${basedir}/releases/${lib.branch}.tar.gz"/>
        <ssh username="${username.ftp}" password="${password}" host="${server}" command="tar -Ppzxf ${basedir}/releases/${lib.branch}.tar.gz; rm -vf ${basedir}/releases/${lib.branch}.tar.gz" />

    </target>


</project>